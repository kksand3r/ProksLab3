@page "/brands/edit/{Id:int}"
@inject HttpClient Http
@inject NavigationManager NavManager
@using Proks_UI.DTOs

<style>
    h3 {
        color: #333;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    label {
        font-weight: 600;
        display: block;
        margin-bottom: 0.25rem;
        color: #555;
    }

    .form-control {
        padding: 8px 12px;
        width: 100%;
        max-width: 400px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 1rem;
        box-sizing: border-box;
    }

    button {
        padding: 8px 16px;
        margin-right: 10px;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        user-select: none;
        transition: background-color 0.2s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #565e64;
        }

    div {
        margin-bottom: 1rem;
    }
</style>

<h3>Edit Brand</h3>

<EditForm Model="brand" OnValidSubmit="UpdateBrand">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>Name:</label>
        <InputText @bind-Value="brand.Name" class="form-control" />
    </div>
    <button class="btn btn-primary" type="submit">Save</button>
    <button class="btn btn-secondary" type="button" @onclick='() => NavManager.NavigateTo("/brands")'>Cancel</button>
</EditForm>

@code {
    [Parameter] public int Id { get; set; }
    private BrandDto brand = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync($"api/brands/{Id}");
        if (response.IsSuccessStatusCode)
        {
            brand = await response.Content.ReadFromJsonAsync<BrandDto>();
        }
        else
        {
            NavManager.NavigateTo("/brands");
        }
    }

    private async Task UpdateBrand()
    {
        var response = await Http.PutAsJsonAsync($"api/brands/{Id}", brand);
        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/brands");
        }
    }
}
