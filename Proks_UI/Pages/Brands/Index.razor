@page "/brands"
@inject HttpClient Http
@inject NavigationManager NavManager
@using Proks_UI.DTOs

<style>
    h3 {
        margin-bottom: 1rem;
        color: #333;
        font-weight: 600;
    }

    .btn {
        padding: 6px 12px;
        margin: 0 4px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
        user-select: none;
        transition: background-color 0.2s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #a71d2a;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
        font-family: Arial, sans-serif;
    }

        .table th, .table td {
            padding: 10px 12px;
            border: 1px solid #ddd;
            text-align: left;
            user-select: none;
        }

        .table th {
            background-color: #f8f8f8;
            font-weight: 600;
            cursor: default;
        }

    .table-striped tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .error-message {
        background-color: #f8d7da;
        color: #842029;
        border: 1px solid #f5c2c7;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 1rem;
    }
</style>

<h3>Brands List</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="error-message">@ErrorMessage</div>
}

<button class="btn btn-primary" @onclick='() => NavManager.NavigateTo("/brands/create")'>+ Add New Brand</button>

@if (brands == null)
{
    <p><em>Loading...</em></p>
}
else if (!brands.Any())
{
    <p>No brands found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var brand in brands)
            {
                <tr>
                    <td>@brand.Name</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="() => EditBrand(brand.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteBrand(brand.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BrandDto>? brands;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            brands = await Http.GetFromJsonAsync<List<BrandDto>>("api/brands");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading brands: {ex.Message}";
        }
    }

    void EditBrand(int id) => NavManager.NavigateTo($"/brands/edit/{id}");

    void DeleteBrand(int id) => NavManager.NavigateTo($"/brands/delete/{id}");

    [Inject] private IJSRuntime JS { get; set; } = default!;
}
